/**
 * @fileoverview Firestore Security Rules for EventChain system.
 *
 * Core Philosophy:
 * This ruleset provides public read access to events and certificates, enabling easy listing and discovery.
 * All write operations (create, update, delete) require authentication.
 * The ruleset does not enforce strict validation and focuses on authorization and relational integrity.
 *
 * Data Structure:
 * - /events/{eventId}: Stores public event data.
 * - /participants/{participantId}: Stores participant data.
 * - /certificates/{certificateId}: Stores public certificate data.
 * - /certificateTemplates/{certificateTemplateId}: Stores certificate templates.
 *
 * Key Security Decisions:
 * - Events and Certificates are publicly readable.
 * - All write operations require authentication.
 * - No listing restrictions are applied to participants or certificate templates.
 *
 * Denormalization for Authorization: N/A (No denormalization is currently needed for these rules).
 * Structural Segregation: N/A (No segregation currently needed).
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Grants public read access to event data and authenticated-user-only write access.
     * @path /events/{eventId}
     * @allow (get, list): Any user can read event data.
     * @allow (create, update, delete): Only authenticated users can modify event data.
     * @deny (create, update, delete): Unauthenticated users cannot modify event data.
     * @principle Allows public read access while restricting write access to authenticated users.
     */
    match /events/{eventId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Grants authenticated-user-only access to participant data.
     * @path /participants/{participantId}
     * @allow (create, get, list, update, delete): Only authenticated users can perform operations on participant data.
     * @deny (create, get, list, update, delete): Unauthenticated users cannot perform operations on participant data.
     * @principle Restricts all access to the participants collection to authenticated users.
     */
    match /participants/{participantId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Grants public read access to certificate data and authenticated-user-only write access.
     * @path /certificates/{certificateId}
     * @allow (get, list): Any user can read certificate data.
     * @allow (create, update, delete): Only authenticated users can modify certificate data.
     * @deny (create, update, delete): Unauthenticated users cannot modify certificate data.
     * @principle Allows public read access while restricting write access to authenticated users.
     */
    match /certificates/{certificateId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Grants authenticated-user-only access to certificate template data.
     * @path /certificateTemplates/{certificateTemplateId}
     * @allow (create, get, list, update, delete): Only authenticated users can perform operations on certificate template data.
     * @deny (create, get, list, update, delete): Unauthenticated users cannot perform operations on certificate template data.
     * @principle Restricts all access to the certificateTemplates collection to authenticated users.
     */
    match /certificateTemplates/{certificateTemplateId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    function isSignedIn() {
      return request.auth != null;
    }
  }
}