/**
 * @fileoverview Firestore Security Rules for EventChain.
 *
 * Core Philosophy:
 * This ruleset prioritizes strong authorization by strictly controlling access
 * to resources. It assumes a public read with restricted write access model for
 * top-level collections, but requires data to be created with the correct ownership
 * fields. All write operations are validated for authorization, while schema validation
 * is relaxed to allow for rapid prototyping.
 *
 * Data Structure:
 * - /events/{eventId}: Publicly readable event data, writable only by the event creator.
 * - /participants/{participantId}: Publicly readable participant data, writable only by the creator.
 * - /certificates/{certificateId}: Publicly readable certificate data, writable only by the creator.
 * - /certificateTemplates/{certificateTemplateId}: Publicly readable certificate template data, writable only by the creator.
 *
 * Key Security Decisions:
 * - Public read access is enabled for all top-level collections to facilitate listing and discovery.
 * - Write access is restricted to document creators, enforced by validating the
 *   presence and correctness of ownership fields (e.g., authorId) on creation.
 * - Update operations enforce the immutability of ownership fields to maintain
 *   relational integrity.
 * - List operations are enabled for owners to allow listing of their own resources.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to the /events/{eventId} collection.
     * @path /events/{eventId}
     * @allow (get, list): Any user can read event details.
     * @allow (create): Only authenticated users can create an event, provided 'authorId' matches their UID.
     * @allow (update, delete): Only the event creator (identified by 'authorId') can modify or delete the event.
     * @deny (create): If the 'authorId' does not match the request.auth.uid.
     * @deny (update, delete): If the user is not the author.
     * @principle Public Read with Owner-Only Writes; Relational Integrity.
     */
    match /events/{eventId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update, delete: if isOwner(eventId, 'events');
    }

    /**
     * @description Controls access to the /participants/{participantId} collection.
     * @path /participants/{participantId}
     * @allow (get, list): Any user can read participant details.
     * @allow (create): Only authenticated users can create an participant, provided 'authorId' matches their UID.
     * @allow (update, delete): Only the participant creator (identified by 'authorId') can modify or delete the participant.
     * @deny (create): If the 'authorId' does not match the request.auth.uid.
     * @deny (update, delete): If the user is not the author.
     */
    match /participants/{participantId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update, delete: if isOwner(participantId, 'participants');
    }

    /**
     * @description Controls access to the /certificates/{certificateId} collection.
     * @path /certificates/{certificateId}
     * @allow (get, list): Any user can read certificate details.
     * @allow (create): Only authenticated users can create an certificate, provided 'authorId' matches their UID.
     * @allow (update, delete): Only the certificate creator (identified by 'authorId') can modify or delete the certificate.
     * @deny (create): If the 'authorId' does not match the request.auth.uid.
     * @deny (update, delete): If the user is not the author.
     */
    match /certificates/{certificateId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update, delete: if isOwner(certificateId, 'certificates');
    }

        /**
     * @description Controls access to the /certificateTemplates/{certificateTemplateId} collection.
     * @path /certificateTemplates/{certificateTemplateId}
     * @allow (get, list): Any user can read certificate details.
     * @allow (create): Only authenticated users can create an certificate, provided 'authorId' matches their UID.
     * @allow (update, delete): Only the certificate creator (identified by 'authorId') can modify or delete the certificate.
     * @deny (create): If the 'authorId' does not match the request.auth.uid.
     * @deny (update, delete): If the user is not the author.
     */
    match /certificateTemplates/{certificateTemplateId} {
          allow get, list: if true;
          allow create: if isSignedIn();
          allow update, delete: if isOwner(certificateTemplateId, 'certificateTemplates');
    }

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(resourceId, collectionName) {
        return get(/databases/$(database)/documents/$(collectionName)/$(resourceId)).data.authorId == request.auth.uid;
    }
  }
}