/**
 * @fileoverview Firestore Security Rules for EventChain System
 *
 * Core Philosophy:
 * This ruleset prioritizes public read access for events to facilitate discovery, while enforcing strict
 * authentication and authorization for data modification. All write operations require a valid user
 * to be signed in.
 *
 * Data Structure:
 * - /events/{eventId}: Stores public event information.
 * - /participants/{participantId}: Stores participant registration details, accessible to authenticated users.
 * - /certificates/{certificateId}: Stores certificate data for events.
 * - /certificateTemplates/{certificateTemplateId}: Stores reusable certificate templates.
 *
 * Key Security Decisions:
 * - Events are publicly readable, but writes are restricted.
 * - Only authenticated users can register as participants.
 * - Data validation is relaxed to allow for rapid prototyping but will be critical for production.
 *
 * Denormalization for Authorization:
 * - The rules do not denormalize data at this stage.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Grants public read access to event data and restricts write access to authenticated users only.
     * @path /events/{eventId}
     * @allow (get, list): Anyone can read event data.
     * @allow (create, update, delete): Only authenticated users can modify event data.
     * @deny (create, update, delete): Unauthenticated users cannot modify event data.
     * @principle Allows public read access and restricts write access to authenticated users only.
     */
    match /events/{eventId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Allows authenticated users to create, read, update, and delete participant data.
     * @path /participants/{participantId}
     * @allow (create, get, list, update, delete): Only authenticated users can manage participant data.
     * @deny (create, get, list, update, delete): Unauthenticated users cannot manage participant data.
     * @principle Enforces access control for participant data to authenticated users only.
     */
    match /participants/{participantId} {
      allow create: if isSignedIn();
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Allows authenticated users to create, read, update, and delete certificate data.
     * @path /certificates/{certificateId}
     * @allow (create, get, list, update, delete): Only authenticated users can manage certificate data.
     * @deny (create, get, list, update, delete): Unauthenticated users cannot manage certificate data.
     * @principle Enforces access control for certificate data to authenticated users only.
     */
    match /certificates/{certificateId} {
      allow create: if isSignedIn();
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Allows authenticated users to create, read, update, and delete certificate template data.
     * @path /certificateTemplates/{certificateTemplateId}
     * @allow (create, get, list, update, delete): Only authenticated users can manage certificate template data.
     * @deny (create, get, list, update, delete): Unauthenticated users cannot manage certificate template data.
     * @principle Enforces access control for certificate template data to authenticated users only.
     */
    match /certificateTemplates/{certificateTemplateId} {
      allow create: if isSignedIn();
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Defines the isSignedIn function, which returns true if the request is authenticated.
     * @return {boolean} True if the request is authenticated, false otherwise.
     * @principle Verifies user authentication.
     */
    function isSignedIn() {
      return request.auth != null;
    }
  }
}